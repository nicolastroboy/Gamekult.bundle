ICON = 'icon-default.jpg'

####################################################################################################
# We add a default query string purely so that it is easier to be tested by the automated channel tester
def Search(query="pug", stype="relevance"):

	return GetVideoList(sort=stype, search=String.Quote(query, usePlus=True))

####################################################################################################
def GetVideoList(path="videos", filters="", sort="recent", limit=25, page=1, search=""):

	oc = ObjectContainer(title1='Dailymotion', title2='Search Results')

	if search == "":
		return oc
	else:
		fields = "title,description,thumbnail_large_url,rating,url,duration,created_time,views_total"
		full_url = "https://api.dailymotion.com/%s?sort=%s&filters=%s&limit=%i&page=%i&fields=%s" % (path, sort, filters, limit, page, fields)
		full_url = "%s&search=%s" % (full_url, search) # only add search if applicable, API doesn't like a NULL search request

	data = JSON.ObjectFromURL(full_url)

	for video in data['list']:
		title = video['title']
		url = video['url']
		duration = video['duration']*1000 # worst case duration is 0 so we get 0

		try:
			views = video["views_total"]
		except:
			views = 0	

		try:
			summary = String.StripTags(video['description'].replace("<br />","\n")) + "\n\nViews: %i" % views
		except:
			summary = ""

		try:
			thumb_url = video['thumbnail_large_url']
		except:
			thumb_url = ""

		try:
			rating = float(video['rating']*2)
		except:
			rating = float(0)

		try:
			originally_available_at = Datetime.FromTimestamp(video['created_time']).date()
		except:
			originally_available_at = None

		oc.add(
			VideoClipObject(
				title = title,
				summary = summary,
				url = url,
				duration = duration,
				rating = rating,
				originally_available_at = originally_available_at,
				thumb = Resource.ContentsOfURLWithFallback(url=thumb_url, fallback=ICON)
			)
		)

	return oc
